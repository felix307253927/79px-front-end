webpackJsonp([3],{KWgA:function(t,s,a){"use strict";Object.defineProperty(s,"__esModule",{value:!0});var e={render:function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"main-container book-page"},[a("div",{staticClass:"section-summary-bg"}),t._v(" "),a("div",{staticClass:"container book-page-container"},[a("div",{staticClass:"summary"},[a("ul",{staticClass:"summary-nav"},t._l([1,2,3,4,5],function(s){return a("li",[a("router-link",{attrs:{to:"/bookPage/"+s+"/"+s}},[t._v("1. 正则表达式简介")])],1)}))]),t._v(" "),t._m(0)])])},staticRenderFns:[function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"content"},[s("div",{staticClass:"content-container"},[s("section",{staticClass:"normal"},[s("h1",[this._v("简介")]),this._v(" "),s("p",[this._v("除非你以前使用过正则表达式，否则你可能不熟悉此术语。但是，毫无疑问，你已经使用过不涉及脚本的某些正则表达式。")]),this._v(" "),s("p",[this._v("例如，你很可能使用 ? 和 * 通配符来查找硬盘上的文件。? 通配符匹配文件名中的单个字符，而 * 通配符匹配零个或多个字符。像 data?.dat 这样的模式将查找文件。尽管这种搜索方法很有用，但它的应用场景还是有限的。")]),this._v(" "),s("p",[this._v("典型的搜索和替换操作要求您提供与预期的搜索结果匹配的确切文本。虽然这种技术对于对静态文本执行简单搜索和替换任务可能已经足够了，但它缺乏灵活性，若采用这种方法搜索动态文本，即使不是不可能，至少也会变得很困难。")])])])])}]},n=a("VU/8")({name:"blog",data:function(){return{}},created:function(){this.$store.commit("setNavStyle","nav-normal")}},e,!1,null,null,null);s.default=n.exports}});
//# sourceMappingURL=3.86610429525cb94b218d.js.map